The error you're encountering, window is not defined, typically occurs because Next.js is a server-side rendering (SSR) framework, and during SSR, the window object (which exists only in the browser) is not available on the server. The boxicons.js script likely relies on the window object, which is not available during the initial render on the server.

'use client';
import UploadIcon from "./UploadIcon";
import axios from 'axios';
export default function UploadForm(){
    async function upload(ev){
        ev.preventDefault();
        const files = ev.target.files;
        if(files.length>0){
            const file = files[0];
            const res = await axios.postForm('/api/upload',{
                file,
            });
            console.log(res.data);
        }
    }
    return(
        <label className="bg-green-500 py-2 px-6 rounded-full text-black inline-flex gap-1 border border-black cursor-pointer">
          <UploadIcon />
          <span>Choose your file</span>
          <input onChange={upload} type="file" className="hidden"/>
        </label>
    );
}


import { PutObjectCommand, S3Client } from '@aws-sdk/client-s3';
import { NextResponse } from 'next/server';
import uniqid from "uniqid";

export async function POST(req) {
    const formData = await req.formData();
    const file = formData.get('file');
    const { name, type } = file;
    const data = await file.arrayBuffer();

    const s3client = new S3Client({
        region: 'ap-south-1',
        credentials: {
            accessKeyId: process.env.AWS_ACCESS_KEY,
            secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
        }
    });

    const id = uniqid();
    const ext = name.split('.').slice(-1)[0];
    const newName = id + '.' + ext ;

    const uploadCommand = new PutObjectCommand({
        Bucket: process.env.BUCKET_NAME,
        Body: data,
        ACL: 'public-read',
        ContentType: type,
        Key: newName,
    });

    await s3client.send(uploadCommand);

    return NextResponse.json({
        name,
        ext,
        newName,
        id,
        message: "file uploaded "
    });
}
//had to use await for acessing params as it is async part and takes time
export default async function FilePage({params}){
    const {filename} = await params;
    return(
        <div>{filename}</div>
    )
}


import { PutObjectCommand, S3Client } from '@aws-sdk/client-s3';
import uniqid from "uniqid";

export async function POST(req) {
    try {
        const formData = await req.formData();
        const file = formData.get('file');
        if (!file) {
            return Response.json({ error: "No file uploaded" }, { status: 400 });
        }

        const { name, type } = file;
        const data = await file.arrayBuffer();

        const s3client = new S3Client({
            region: 'ap-south-1',
            credentials: {
                accessKeyId: process.env.AWS_ACCESS_KEY,
                secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
            }
        });

        const id = uniqid();
        const ext = name.split('.').slice(-1)[0];
        const newName = id + '.' + ext ;

        const uploadCommand = new PutObjectCommand({
            Bucket: process.env.BUCKET_NAME,
            Body: data,
            ACL: 'public-read',
            ContentType: type,
            Key: newName,
        });

        await s3client.send(uploadCommand);

        return Response.json({
            name,
            ext,
            newName,
            id,
            message: "file uploaded "
        });
    } catch (error) {
        console.error('Error uploading file:', error);
        return Response.json({ error: "Error uploading file" }, { status: 500 });
    }
}


import { exec } from "child_process";

export default async function FilePage({ params }) {
    const { filename } = await params;

    console.log(`Processing file: ${filename}`);

    // Run the shell script
    exec(
        `BUCKET_NAME=${process.env.BUCKET_NAME} AWS_REGION=${process.env.AWS_REGION} FILENAME=${filename} ./convert_mp4_to_wav.sh`,
        (error, stdout, stderr) => {
            if (error) {
                console.error(`Error during processing: ${error.message}`);
                return;
            }
            if (stderr) {
                console.error(`Shell script stderr: ${stderr}`);
                return;
            }
            console.log(`Shell script stdout: ${stdout}`);
        }
    );

    return (
        <div>
            <h1>File Processing</h1>
            <p>Filename: {filename}</p>
            <p>Conversion and transcription process initiated. Check the console for logs.</p>
        </div>
    );
}

Layout.js file:

import localFont from "next/font/local";
import "./globals.css";
import Link from "next/link";

import 'boxicons/css/boxicons.min.css';

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});

const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased bg-gradient-to-b 
        from-black to-gray-800 min-h-screen text-white`}
      >
        <main className="p-4 max-w-screen-md mx-auto">
          <header className="flex justify-between my-8">
            <Link href="/" className="flex gap-1 items-center">
              {/* Using custom box-icon element */}
              <box-icon name='captions' type='solid' animation='flashing' color='green' ></box-icon>
              <span>CAPTIONIZE</span>
            </Link>
            <nav className="flex gap-7 text-white/70">
              <Link href="/">Home</Link>
              <Link href="/Pricing">Pricing</Link>
              <a href="mailto:contact@captionize.com">Contact</a>
            </nav>
          </header>
          {children}
        </main>
      </body>
    </html>
  );
}


flex gap-7 text-white/70  -> Layout tailwind
**********
for chunks 404 error run->
rm -rf node_modules
yarn install


changes made for optimising and converting to v3:
script:
#!/bin/bash

# Ensure required environment variables are set
if [ -z "$BUCKET_NAME" ] || [ -z "$AWS_REGION" ] || [ -z "$FILENAME" ]; then
    echo "Error: BUCKET_NAME, AWS_REGION, and FILENAME must be set as environment variables."
    exit 1
fi

# Log function for better debugging
log() {
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $1"
}

log "Bucket Name: $BUCKET_NAME"
log "AWS Region: $AWS_REGION"
log "Filename: $FILENAME"

# Define paths
BASE_NAME=$(basename "$FILENAME" .mp4)
S3_URL="https://${BUCKET_NAME}.s3.${AWS_REGION}.amazonaws.com/${FILENAME}"
WAV_FILE="${BASE_NAME}.wav"
TRANSCRIPTION_DIR="./Transcription"
TRANSCRIPTION_FILE="${TRANSCRIPTION_DIR}/${BASE_NAME}_transcription.txt"

# Ensure Transcription directory exists
mkdir -p "$TRANSCRIPTION_DIR"

# Step 1: Check if FFmpeg is installed
if ! command -v ffmpeg &> /dev/null; then
    log "FFmpeg is not installed. Attempting to install FFmpeg..."
    brew install ffmpeg
    if ! command -v ffmpeg &> /dev/null; then
        log "FFmpeg installation failed. Please install FFmpeg manually."
        exit 1
    fi
fi

# Step 2: Convert MP4 from S3 URL to WAV directly
log "Converting MP4 from S3 URL to WAV..."
ffmpeg -i "$S3_URL" -vn -acodec pcm_s16le -ar 44100 -ac 2 "$WAV_FILE"
if [ $? -ne 0 ]; then
    log "Error: MP4 to WAV conversion failed."
    exit 1
fi
log "MP4 to WAV conversion completed: $WAV_FILE"

# Step 3: Transcribe WAV with WhisperX
log "Starting transcription..."
whisperx --compute_type float32 --device cpu "$WAV_FILE" > "$TRANSCRIPTION_FILE"
if [ $? -ne 0 ]; then
    log "Error: Transcription failed."
    exit 1
fi
log "Transcription completed successfully."
log "Transcription saved to: $TRANSCRIPTION_FILE"

# Optional Cleanup
rm "$WAV_FILE"

log "Processing completed."

****get-presigned-url/route.js:

import AWS from "aws-sdk";

const s3 = new AWS.S3({
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
    region: process.env.AWS_REGION,
});

// Handle GET requests
export async function GET(req) {
    const { searchParams } = new URL(req.url);
    const file = searchParams.get("file");

    if (!file) {
        return new Response(
            JSON.stringify({ error: "File name is required" }),
            { status: 400, headers: { "Content-Type": "application/json" } }
        );
    }

    const params = {
        Bucket: "riddhi-captionize", // Replace with your S3 bucket name
        Key: file,
        Expires: 60 * 5, // URL expiry time in seconds
    };

    try {
        const url = s3.getSignedUrl("getObject", params);
        return new Response(
            JSON.stringify({ url }),
            { status: 200, headers: { "Content-Type": "application/json" } }
        );
    } catch (error) {
        return new Response(
            JSON.stringify({ error: "Failed to generate pre-signed URL" }),
            { status: 500, headers: { "Content-Type": "application/json" } }
        );
    }
}


get-srt/route.js:
import fs from "fs/promises";
import path from "path";

export async function GET(req) {
    const { searchParams } = new URL(req.url);
    const file = searchParams.get("file");

    if (!file) {
        return new Response(JSON.stringify({ error: "File parameter is missing" }), { status: 400 });
    }

    // Replace `.tsv` extension with `.srt`
    const baseName = path.basename(file, path.extname(file));
    const srtFile = `${baseName}.srt`;
    const filePath = path.resolve(process.cwd(), srtFile);

    try {
        const content = await fs.readFile(filePath, "utf-8");
        return new Response(content, { status: 200 });
    } catch (err) {
        console.error(`Error reading SRT file: ${err.message}`);
        return new Response(JSON.stringify({ error: "Failed to read SRT file" }), { status: 500 });
    }
}


upload/route.js:
import { PutObjectCommand, S3Client } from '@aws-sdk/client-s3';
import uniqid from "uniqid";

export async function POST(req) {
    try {
        const formData = await req.formData();
        const file = formData.get('file');
        
        if (!file) {
            return new Response(JSON.stringify({ error: "No file uploaded" }), { status: 400 });
        }

        const { name, type } = file;
        const data = await file.arrayBuffer();

        const s3client = new S3Client({
            region: process.env.AWS_REGION || 'ap-south-1',
            credentials: {
                accessKeyId: process.env.AWS_ACCESS_KEY,
                secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
            }
        });

        const id = uniqid();
        const ext = name.split('.').pop();
        const newName = `${id}.${ext}`;

        const uploadCommand = new PutObjectCommand({
            Bucket: process.env.BUCKET_NAME,
            Body: data,
            ACL: 'public-read',
            ContentType: type,
            Key: newName,
        });

        await s3client.send(uploadCommand);

        // Construct the public URL of the uploaded file
        const fileUrl = `https://${process.env.BUCKET_NAME}.s3.${process.env.AWS_REGION || 'ap-south-1'}.amazonaws.com/${newName}`;

        return new Response(JSON.stringify({
            name,
            ext,
            newName,
            id,
            message: "File uploaded successfully",
            url: fileUrl,
        }), { status: 200 });
    } catch (error) {
        console.error('Error uploading file:', error);

        return new Response(JSON.stringify({
            error: "Error uploading file",
            details: error.message,
        }), { status: 500 });
    }
}


****change in uploadform:
'use client';
import { useState } from 'react';
import UploadIcon from "./UploadIcon";
import axios from 'axios';
import { useRouter } from 'next/navigation';

export default function UploadForm() {
    const [uploading, setUploading] = useState(false); // Track if upload is in progress
    const [uploadStatus, setUploadStatus] = useState('');
    const router = useRouter();

    async function upload(ev) {
        ev.preventDefault();
        const files = ev.target.files;

        if (files.length > 0) {
            const file = files[0];
            setUploading(true); // Show loading screen
            setUploadStatus('Uploading...');
            try {
                const formData = new FormData();
                formData.append('file', file);

                const res = await axios.post('/api/upload', formData, {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    },
                });

                setUploading(false); // Hide loading screen
                setUploadStatus('Upload successful!');
                const newName = res.data.newName;
                router.push('/' + newName);
            } catch (error) {
                console.error('Upload error:', error);
                setUploading(false); // Hide loading screen
                setUploadStatus('Upload failed. Please try again.');
                if (error.response) {
                    console.error(error.response.data);
                    console.error(error.response.status);
                    console.error(error.response.headers);
                } else if (error.request) {
                    console.error(error.request);
                } else {
                    console.error('Error', error.message);
                }
            }
        }
    }

    return (
        <div className="relative">
            {/* Loading Screen */}
            {uploading && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
                    <div className="bg-white p-4 rounded-lg shadow-lg text-center">
                        <p className="text-md font-semibold text-black">Uploading...</p>
                    </div>
                </div>
            )}

            {/* File Upload Form */}
            <label className="bg-green-500 py-2 px-6 rounded-full text-black inline-flex gap-1 border border-black cursor-pointer">
                <UploadIcon />
                <span>Choose your file</span>
                <input onChange={upload} type="file" className="hidden" />
            </label>
            {uploadStatus && <p className="mt-2">{uploadStatus}</p>}
        </div>
    );
}

TranscriptionHelper.js:

export function parseSRTContent(srtContent) {
    // Split the content into blocks using double line breaks
    const blocks = srtContent.split("\n\n");
    
    // Map each block into an object
    const parsedData = blocks.map((block) => {
        const lines = block.split("\n");

        if (lines.length < 3) return null; // Ensure the block has enough lines

        const timingLine = lines[1]; // Timing line (e.g., "00:00:01,000 --> 00:00:03,000")
        const [start, end] = timingLine.split(" --> "); // Split by delimiter
        
        return {
            start: convertSRTTimeToSeconds(start), // Convert start time to seconds
            end: convertSRTTimeToSeconds(end),   // Convert end time to seconds
            text: lines.slice(2).join(" ").trim(), // Combine all text lines into one
        };
    });

    // Filter out invalid blocks
    return parsedData.filter((item) => item && !isNaN(item.start) && !isNaN(item.end) && item.text);
}

// Helper function to convert SRT time format (hh:mm:ss,ms) to seconds
function convertSRTTimeToSeconds(time) {
    const [hours, minutes, seconds] = time.split(":");
    const [secs, millis] = seconds.split(",");
    return (
        parseInt(hours) * 3600 + // Convert hours to seconds
        parseInt(minutes) * 60 + // Convert minutes to seconds
        parseInt(secs) +         // Add seconds
        parseInt(millis) / 1000  // Add milliseconds as fractional seconds
    );
}


Error:::  Error: Unexpected non-whitespace character after JSON at position 2 (line 2 column 1)
Please refresh the page or contact support


ResultVideo.js file:
"use client";

import { FFmpeg } from "@ffmpeg/ffmpeg";
import SparklesIcon from "./SparklesIcon";
import { useRef } from "react";

export default function ResultVideo({ videoRef, videoUrl }) {
  const [loaded, setLoaded] = useState(false);
    const ffmpegRef = useRef(new FFmpeg());
    const videoRef = useRef(null);
  return (
    <div ref={videoRef} className="bg-black/50 p-4 rounded-md">
      <h3 className="text-xl font-semibold text-center mb-4">Video Preview</h3>
      <div className="mb-4">
        <button className="bg-green-500 py-2 px-6 rounded-full text-black inline-flex gap-1 border border-black cursor-pointer">
          <SparklesIcon />
          <span>Captionize it!</span>
        </button>
        {videoUrl ? (
          <video
            ref={videoRef}
            src={videoUrl}
            controls
            className="w-full rounded-md mt-4"
          ></video>
        ) : (
          <p>Loading video...</p>
        )}
      </div>
    </div>
  );
}
